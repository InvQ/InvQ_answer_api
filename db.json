{
  "frontend": [
    {
      "id": 1,
      "question": "브라우저 렌더링 과정을 설명해주세요.",
      "answer": "로더가 서버로부터 전달받은 리소스 스트림을 읽습니다. 이후 웹 엔지의 HTML/XML parser가 문서를 파싱해 DOM Tree를, CSS parser가 CSSOM 트리를 생성합니다. DOM과 CSSOM을 결합하여 렌더링 트리를 형성합니다. css와 레이아웃을을 계산합니다. 마지막으로 각 노드를 화면에 페인팅합니다."
    },
    {
      "id": 2,
      "question": "webpack에 대해 설명해주세요.",
      "answer": "규모가 있는 시스템에서는 많은 Javascript파일이 존재합니다. 이 많은 파일을 하나의 파일로 관리하기엔 어려움이 있습니다. 여러개를 호출하였을 때 로딩속도가 느려지고 각 파일의 변수 충돌의 위험성도 존재하게 됩니다. 그래서 javascript 응용 프로그램을 위한 정적 모듈 번들러인 webpack을 이용함으로써 하나 또는 여러개의 번들을 생성해 구축합니다."
    },
    {
      "id": 3,
      "question": "Babel에 대해 설명해주세요.",
      "answer": "바벨은 버전이 낮은 브라우저에서도 현재 버전의 Javascript가 동작할 수 있도록 이전 버전의 JS코드로 변환하는데 주로 사용하는 트랜스컴파일러입니다."
    },
    {
      "id": 4,
      "question": "CSR과 SSR의 차이는 무엇인가요?",
      "answer": "CSR의 경우 HTML, CSS와 모든 스크립트들을 한 번에 불러옵니다. 반면에 SSR은 사용자가 필요한 경우일 때만 일부분의 HTML과 스크립트를 불러옵니다."
    },
    {
      "id": 5,
      "question": "타입스크립트를 사용하는 이유는 무엇인가요?",
      "answer": "정적 타입 체크, 코드 예측성 향상, 유지보수 용이성 향상 등의 이점이 있습니다. 또한 자바스크립트의 한계점을 보완하며, 개발자의 실수를 줄여줍니다. 하지만 초기 설정이 번거로울 수 있고, 타입 정의에 대한 추가적인 작업이 필요합니다."
    },
    {
      "id": 6,
      "question": "쿠키, 세션, 웹 스토리지의 차이점에 대해 설명해주세요.",
      "answer": "쿠키는 클라이언트에 저장되는 작은 데이터 파일로, 로그인 정보나 사용자의 선호도 등을 저장합니다. 보안 이슈가 있을 수 있습니다. 추가예정..."
    }
  ]
}
